# Generated by Django 5.1.3 on 2025-02-08 22:14

import django.core.validators
import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Federation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo', models.ImageField(upload_to='federation_logos/')),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo', models.ImageField(upload_to='sponsor_logos/')),
                ('url', models.URLField(blank=True, null=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TshirtSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(choices=[('XS', 'Extra Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('XXL', '2X Large'), ('XXXL', '3X Large')], max_length=5, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('zip_code', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('comp_date', models.DateField()),
                ('comp_end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, default='competition_images/default_competition_image2.jpg', null=True, upload_to='competition_images/')),
                ('capacity', models.PositiveIntegerField(default=100)),
                ('description', tinymce.models.HTMLField(blank=True)),
                ('liability_waiver', models.TextField(blank=True)),
                ('scoring_system', models.CharField(max_length=50)),
                ('event_location_name', models.CharField(blank=True, max_length=255)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('state', models.CharField(blank=True, max_length=255)),
                ('zip_code', models.CharField(blank=True, max_length=10)),
                ('facebook_url', models.URLField(blank=True, help_text='Facebook page URL for the competition', null=True)),
                ('instagram_url', models.URLField(blank=True, help_text='Instagram profile URL for the competition', null=True)),
                ('registration_deadline', models.DateTimeField()),
                ('signup_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('full', 'Full'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('limited', 'Limited'), ('closed', 'Closed')], max_length=20)),
                ('approval_status', models.CharField(choices=[('approved', 'Approved'), ('waiting', 'Waiting')], default='waiting', help_text='Admin approval status', max_length=10)),
                ('publication_status', models.CharField(choices=[('published', 'Published'), ('unpublished', 'Unpublished')], default='unpublished', help_text='Organizer publication status', max_length=12)),
                ('email_notifications', models.BooleanField(default=False, help_text='Email organizer when athlete signs up')),
                ('provides_shirts', models.BooleanField(default=False, help_text='Check if T-shirts are provided')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_competitions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CommentatorNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.athleteprofile')),
                ('commentator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competitions.competition')),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predefined_name', models.CharField(blank=True, choices=[('novice', 'Novice'), ('teen', 'Teen'), ('master', 'Master'), ('open', 'Open'), ('adaptive', 'Adaptive'), ('pro', 'Pro')], help_text='Choose a predefined name or leave blank to set a custom name.', max_length=50, null=True)),
                ('custom_name', models.CharField(blank=True, help_text='Provide a custom division name if none of the predefined names apply.', max_length=100, null=True)),
                ('is_custom', models.BooleanField(default=False)),
                ('competition', models.ForeignKey(blank=True, help_text='Competition this custom division belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_divisions', to='competitions.competition')),
            ],
        ),
        migrations.AddField(
            model_name='competition',
            name='allowed_divisions',
            field=models.ManyToManyField(related_name='competitions_allowed_divisions', to='competitions.division'),
        ),
        migrations.CreateModel(
            name='AthleteCompetition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('canceled', 'Canceled'), ('refunded', 'Refunded'), ('paid', 'Paid')], max_length=20)),
                ('registration_status', models.CharField(choices=[('pending', 'Pending'), ('complete', 'Complete'), ('canceled', 'Canceled')], default='pending', max_length=20)),
                ('signed_up', models.BooleanField(default=False)),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('weigh_in', models.DecimalField(blank=True, decimal_places=2, help_text="Athlete's weight (lbs) recorded at the competition weigh-in.", max_digits=5, null=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.athleteprofile')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competitions.competition')),
                ('division', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='competitions.division')),
                ('tshirt_size', models.ForeignKey(blank=True, help_text='T-shirt size for the participant (if applicable).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='competitions.tshirtsize')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('order', models.PositiveSmallIntegerField(default=1)),
                ('weight_type', models.CharField(choices=[('time', 'Time'), ('distance', 'Distance'), ('max', 'Max Weight'), ('height', 'Height'), ('reps', 'Reps')], max_length=20)),
                ('has_multiple_implements', models.BooleanField(default=False, help_text='Check if the event has multiple implements.')),
                ('number_of_implements', models.PositiveIntegerField(blank=True, help_text='Number of implements if the event has multiple implements.', null=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='competitions.competition')),
                ('event_base', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='competitions.eventbase')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='competition',
            name='federation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='competitions', to='competitions.federation'),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_earned', models.PositiveIntegerField(default=0, help_text='Points awarded based on performance.')),
                ('event_rank', models.PositiveSmallIntegerField(blank=True, help_text='Ranking in the event.', null=True)),
                ('time', models.DurationField(blank=True, help_text='Recorded time for time-based events.', null=True)),
                ('value', models.CharField(blank=True, help_text='Performance value (e.g., weight lifted, distance, reps, etc.).', max_length=255)),
                ('athlete_competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='competitions.athletecompetition')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='competitions.event')),
            ],
            options={
                'ordering': ['event__order', 'event_rank'],
            },
        ),
        migrations.AddField(
            model_name='competition',
            name='sponsor_logos',
            field=models.ManyToManyField(blank=True, to='competitions.sponsor'),
        ),
        migrations.AddField(
            model_name='competition',
            name='allowed_tshirt_sizes',
            field=models.ManyToManyField(blank=True, to='competitions.tshirtsize'),
        ),
        migrations.CreateModel(
            name='WeightClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Weight')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('weight_d', models.CharField(choices=[('u', 'u'), ('+', '+')], max_length=2)),
                ('category', models.CharField(choices=[('lw', 'LW'), ('mw', 'MW'), ('hw', 'HW'), ('shw', 'SWH')], default='middleweight', help_text='Weight class category (e.g., lightweight, middleweight).', max_length=20)),
                ('is_custom', models.BooleanField(default=False)),
                ('competition', models.ForeignKey(blank=True, help_text='Competition this custom weight class belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_weight_classes', to='competitions.competition')),
                ('federation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competitions.federation')),
            ],
        ),
        migrations.CreateModel(
            name='EventImplement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('implement_name', models.CharField(blank=True, help_text='Name of the implement (e.g., Log, Sandbag).', max_length=100)),
                ('implement_order', models.PositiveIntegerField(default=1, help_text='Order of the implement within the event.')),
                ('weight', models.IntegerField(help_text='Weight of the implement.')),
                ('weight_unit', models.CharField(choices=[('lbs', 'lbs'), ('kg', 'kg')], default='lbs', help_text='Weight unit (lbs or kg).', max_length=20)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_implements', to='competitions.division')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='implements', to='competitions.event')),
                ('weight_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_implements', to='competitions.weightclass')),
            ],
            options={
                'ordering': ['event', 'implement_order'],
            },
        ),
        migrations.AddField(
            model_name='athletecompetition',
            name='weight_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='competitions.weightclass'),
        ),
        migrations.AlterUniqueTogether(
            name='athletecompetition',
            unique_together={('athlete', 'competition')},
        ),
    ]
